---
- hosts: devpc

  vars:
    shell_terminal_state: present
    shell_prompt_state: present
    terminator_state: present
    current_shell: "{{ lookup('env', 'SHELL') }}"
    current_home: "{{ lookup('env','HOME') }}"
    starship_install_dir:  "{{ current_home }}/.starship/bin/"
    shell_promt_terminal_download_dest: /tmp/ansible/terminal/

  tasks:
    - name: Install zsh dependencies.
      become: true
      ansible.builtin.apt:
        name: fonts-powerline
        state: "{{ shell_terminal_state }}"
        update_cache: true
        cache_valid_time: 3600

    - name: Install zsh.
      become: true
      ansible.builtin.apt:
        name: zsh
        update_cache: true
        cache_valid_time: 3600
        state: "{{ shell_terminal_state }}"

    - name: Get zsh location.
      ansible.builtin.shell:
        cmd: which zsh
      register: which_zsh
      when: shell_terminal_state == 'present' or shell_terminal_state == 'latest'

    - name: Set zsh as default.
      become: true
      ansible.builtin.shell:
        cmd: chsh -s $(which zsh)
      when: current_shell != which_zsh.stdout and shell_terminal_state == 'present' or shell_terminal_state == 'latest'

    # - name: Uninstall Starship.
    #   ansible.builtin.file:
    #     state: absent
    #     path: "{{ starship_install_dir }}
    #   when: shell_prompt_state == 'absent' or shell_prompt_state == 'latest'

    - name: Set default shell after uninstall zsh.
      become: true
      ansible.builtin.shell: |
        chsh -s $(which sh)
        unset ZSH
      when: shell_prompt_state == 'absent' or shell_prompt_state == 'latest'

    # - name: Check if Starship is installed.
    #   ansible.builtin.stat:
    #     path: "{{ starship_install_dir }}"
    #   register: shell_prompt_directory

    # - name: Create tmp download directory.
    #   ansible.builtin.file:
    #     state: directory
    #     path: "{{ shell_promt_terminal_download_dest }}"
    #     mode: '0700'
    #   when: shell_prompt_state == 'present' and shell_prompt_directory.stat.exists == false or shell_prompt_state == 'latest'

    # - name: Download Starship.
    #   ansible.builtin.get_url:
    #     url: https://raw.githubusercontent.com/starship/starship/master/install/install.sh
    #     dest: "{{ shell_promt_terminal_download_dest }}install.sh"
    #     mode: '0700'
    #   when: shell_prompt_state == 'present' and shell_prompt_directory.stat.exists == false or shell_prompt_state == 'latest'

    # - name: Install Starship.
    #   ansible.builtin.shell:
    #     chdir: "{{ shell_promt_terminal_download_dest }}"
    #     cmd: "sh install.sh --bin-dir="{{ starship_install_dir }}" --force -verbose"
    #   when: shell_prompt_state == 'present' and shell_prompt_directory.stat.exists == false or shell_prompt_state == 'latest'

    # - name: Configure zsh to use Starship.
    #   ansible.builtin.lineinfile:
    #     path: ~/.zshrc
    #     regexp: '^eval "$(starship init zsh)"'
    #     line: 'eval "$(starship init zsh)"'
    #   when: shell_prompt_state == 'present' and shell_prompt_directory.stat.exists == false or shell_prompt_state == 'latest'

    # - name: Configure Oh My Zsh - python alias.
    #   ansible.builtin.lineinfile:
    #     path: ~/.zshrc
    #     regexp: '^alias python='
    #     line: python=python3
    #   when: shell_prompt_state == 'present' and shell_prompt_directory.stat.exists == false or shell_prompt_state == 'latest'

    # - name: Delete tmp download directory.
    #   ansible.builtin.file:
    #     state: absent
    #     path: "{{ shell_promt_terminal_download_dest }}"
    #   when: shell_prompt_state == 'present' and shell_prompt_directory.stat.exists == false or shell_prompt_state == 'latest'

    - name: Install terminator
      become: true
      ansible.builtin.apt:
        name: terminator
        update_cache: true
        cache_valid_time: 3600
        state: "{{ terminator_state }}"
